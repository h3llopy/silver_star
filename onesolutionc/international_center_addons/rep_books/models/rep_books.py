from odoo import api, fields, models from odoo.exceptions import ValidationErrorclass RepBooks(models.Model):    _name = 'rep.books'    name = fields.Many2one(comodel_name="res.partner", string="Employee", required=True, )    book_type = fields.Selection(string="Book Type", selection=[('receive', 'Receive Money'), ('send', 'Send Money'), ], required=False, )    book_num = fields.Integer(string="Book Number", required=False, )    serial_from = fields.Integer(string="Serial From", required=False, )    serial_to = fields.Integer(required=False, )    state = fields.Selection(string="State", selection=[('draft', 'Draft'), ('confirmed', 'Confirmed'), ('done', 'Done')], required=False,default="draft" )    lines_ids = fields.One2many(comodel_name="rep.books.line", inverse_name="rep_id", required=False, readonly=False)    def apply(self):        for rep in self:            vals=[]            diffrence=rep.serial_to-rep.serial_from            num=rep.serial_from            for i in range(1,diffrence + 2):                print(i)                for record in rep.lines_ids:                    rep.write({'lines_ids': [(2, record.id)]})                vals.append((0, 0, {                    'serial':num,                    'rep_id':rep.id,                }))                num += 1                # if num == rep.serial_to:                #     break                rep.update({'lines_ids': vals})                self.state='confirmed'        return True    # @api.constrains('name')    # def _constrains_state(self):    #     for x in self:    #         books_lines = self.env['rep.books.line'].search(    #             [('rep_id', '=', x.id), ('is_paid', '=', True)])    #         if x.lines_ids:    #             if x.lines_ids.ids == books_lines.ids:    #                 self.state = 'done'    @api.onchange('book_num')    def book_num_validation(self):        books = self.search([])        for book in books:            if book.book_num == self.book_num:                if book.book_type == self.book_type:                    raise ValidationError('This Book Number Already exist')    def name_get(self):        # name get function for the model executes automatically        res = []        for rec in self:            res.append((rec.id, '%s - %s' % (rec.book_num, rec.name.name)))        return resclass RebBooksLines(models.Model):    _name = 'rep.books.line'    _rec_name = "serial"        serial = fields.Integer(string="Serial", required=False, readonly=True)    partner_id = fields.Many2one(comodel_name="res.partner", string="Partner", required=False,readonly=True )    date = fields.Date(string="Date", required=False, readonly=True)    amount = fields.Float(string="Amount",  required=False,readonly=True )    is_paid = fields.Boolean(string="Is Paid", readonly=True)    rep_id = fields.Many2one(comodel_name="rep.books", string="RepBooks", required=False,readonly=True )    serial_type = fields.Selection(string="Type", selection=[('canceled', 'Canceled'), ('used', 'Used'), ], required=True, default='used')class ResPartner(models.Model):    _inherit = 'res.partner'    is_rep = fields.Boolean(string="Is Rep", )class Payment(models.Model):    _inherit = 'account.payment'    employee_id = fields.Many2one(comodel_name="res.partner", string="Employee", required=False, copy=False,)    book_id = fields.Many2one(comodel_name="rep.books", string="Books", required=False,copy=False, )    serial = fields.Many2one(comodel_name="rep.books.line",copy=False, string="Serials", required=False, )    books_ids = fields.Many2many(comodel_name="rep.books", compute='_compute_books_ids')    @api.depends('payment_type','employee_id')    def _compute_books_ids(self):        if self.payment_type:            if self.payment_type == 'outbound':               self.books_ids = self.env['rep.books'].search([('name', '=', self.employee_id.id), ('book_type', '=', 'send'),('state','=','confirmed')]).ids            if self.payment_type == 'inbound':                self.books_ids = self.env['rep.books'].search([('name', '=', self.employee_id.id), ('book_type', '=', 'receive'),('state','=','confirmed')]).ids        else:            self.books_ids=None    def action_post(self):        for x in self:            x.serial.partner_id = x.partner_id            x.serial.is_paid = True            x.serial.amount = x.amount            x.serial.date = x.date            books_lines = self.env['rep.books.line'].search(                        [('rep_id', '=', x.book_id.id), ('is_paid', '=', True)])            if books_lines.ids == x.book_id.lines_ids.ids:                x.book_id.state = 'done'        return super(Payment, self).action_post()